@ Target window name you wish to capture. Leave it to empty if you wish to capture your whole screen
@ Expected name it not case sensitive and can be only a part of the full name. Ex : "craft" instead "Minecraft"
WindowName=

@ In case your network traffic can not handle the data amount. Resize the image to exactly that you use when streaming
@ In case you are streaming with 20 FPS, and your stream resolution is 720p, that is 1280*720*4*20 = 73728000 bytes per second that needs to be transferred to the secondary PC ( 73 MB / sec is a lot ! )
@ If you do not wish to resize the captured image that leave this to -1
@ If you resize, i advise you to maintain aspect ratio to not make the screen look silly
ResizeToWidth=640
ResizeToHeight=480

@ Resize algorithm
@ Note : ! Right now only method 1 is implemented !
@ 1 - Direct Resize. The least CPU usage. It is not encoder friendly !
@ 2 - 2x tap filtering. Moderate CPU usage. Encoder Friendly
@ 3 - 3x tap filtering. High CPU usage. Encoder friendly
ResizeMethod=1

@ Reduce Color depth. Reduces network traffic amount. In some cases it might not be encoder friendly. 
@ 1 - no reduction
@ 2 - 7 bits per plane
@ 3 - 6 bits per plane
@ 4 - 5 bits per plane
@ 5 - 4 bits per plane
ReduceColorDepth=4

@ Use local compression to reduce each frame size ?
@ 0 - no compression
@ 9 - max compression strength
CompresionStrength=3

@ Avoid making your CPU smoke. Allow your CPU to idle( if he can )
FPSLimit=20

@ Show statistics about what goes on inside the program. As funny this sounds, this does eat up CPU :P
@ 0 - none
@ 1 - show fps only
@ 2 - show all
ShowStatistics=2

@ The IP of the PC you will use to encode
ListenPort=6888
MaxNetworkPacketSize=14440000

@ Best Speed Setup : Resize the images as much as you can. Use Resize method 1. If image size is small enough than do not use compression when sending over network.